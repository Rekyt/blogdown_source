lL = creer_lettre(c("g", "g", "r", "r"))
all_colors = list(lA, lB, lC, lD, lE, lF, lG, lH, lI, lJ, lK, lL)
all_colors = setNames(all_colors, LETTERS[1:12])
# Substitution -----------------------------------------------------------------
# Puzzle text line by line
first_line  = c("GFLFGFLFLFGFFLFFI")
second_line = c("AADADKDEDABKAAADB")
third_line  = c("DAAKDFAAAABKADAAC")
fourth_line = c("ILIGIGIFLIIKFGFLF")
fifth_line  = c("KABFBBBCCBBHADKDK")
sixth_line  = c("KABLBHBKBBBKADFDF")
# in a single matrix
puzzle_text = matrix(c(first_line, second_line, third_line, fourth_line,
fifth_line, sixth_line), nrow = 6)
# In a single matrix split by character
single_matrix = apply(puzzle_text, 1, strsplit, split = "")
single_matrix = matrix(unlist(single_matrix), byrow = TRUE, nrow = 6)
# Convert each letter to a matrix of colors
colored_output = lapply(single_matrix, function(x) {
all_colors[[x]]
})
# Assemble colors to be a single matrix
first_color  = do.call(cbind, colored_output[1:17])
second_color = do.call(cbind, colored_output[18:34])
third_color  = do.call(cbind, colored_output[35:51])
fourth_color = do.call(cbind, colored_output[52:68])
fifth_color  = do.call(cbind, colored_output[69:85])
sixth_color  = do.call(cbind, colored_output[86:102])
total_color = do.call(rbind, list(first_color,
second_color,
third_color,
fourth_color,
fifth_color,
sixth_color))
total_color
image(total_color)
plot(total_color)
colorRampPalette(c("red","blue"))(255)
dim(total_color)
12*34
image(matrix(1:408, nrow = 12, ncol = 34), col = total_color)
?image
image(matrix(1:408, nrow = 12, ncol = 34), col = total_color,xaxt="n",yaxt="n")
image(matrix(1:408, nrow = 12, ncol = 34), col = total_color,xaxt="n",yaxt="n", asp= 1)
image(matrix(1:408, nrow = 12, ncol = 34), col = total_color,useRaster = TRUE)
puzzle_text
single_matrix
total_color
first_color
image(matrix(1:68, nrow = 2), col = first_color)
image(t(matrix(1:68, nrow = 2)), col = first_color)
col2rgb("#FFFF00")
total_color
sixth_color
colored_output
puzzle_text[[86]]
puzzle_text
single_matrix[[86]]
single_matrix[[85]]
single_matrix[[102]]
single_matrix[[101]]
colored_output
colored_output
dim(colored_output)
dim(total_color)
matrix(unlist(colored_output), nrow = 12)
puzzle_text
single_matrix
colored_output
colored_output[[6]]
matrix(unlist(colored_output), nrow = 12)
colored_output
colored_output[[6]]
colored_output[[7]]
firstdo.call(cbind, colored_output[1:6])
colored_output[1:6]
do.call(rbind, colored_output[1:6])
102/6
all_cols = lapply(1:17, function(x) {
min_range = 1 + (x-1)*6
max_range = x*6
})
all_cols = lapply(1:17, function(x) {
min_range = 1 + (x-1)*6
max_range = x*6
c(min_range, max_range)
})
all_cos
all_cols
all_columns = lapply(1:17, function(x) {
min_range = 1 + (x-1)*6
max_range = x*6
do.call(rbind, colored_output[min_range:max_range])
})
total_color = do.call(rbind, all_columns)
total_color
dim(total_color)
total_color = do.call(cbind, all_columns)
total_color
image(matrix(1:408, nrow = 12, ncol = 34), col = total_color, useRaster = TRUE)
total_color
library("dplyr")
total_color %>%
apply(grDevices::col2rgb) %>%
magick::image_read() %>%
magick::image_display()
traceback()
col2rgb("red")
col2rgb("#FF0000")
total_color %>%
apply(grDevices::col2rgb)
total_color %>%
apply(1, grDevices::col2rgb)
total_color %>%
apply(1, grDevices::col2rgb) %>%
magick::image_read() %>%
magick::image_display()
saveRDS(total_rds, "Downloads/exemple_matrice.Rds")
saveRDS(total_color, "Downloads/exemple_matrice.Rds")
total_color
t(total_color)
12*34
image(matrix(1:408, nrow = 34, ncol = 12), col = t(total_color))
# Code pour l'énigme Zwolle #4
# Fonctions --------------------------------------------------------------------
creer_lettre = function(given_vector, dictionary = color_dict) {
# Vérification que code correspond à dictionnaire
if (!all(unique(given_vector) %in% names(dictionary))) {
stop("Mismatch between dictionary and vector!")
}
used_vector = dictionary[given_vector]
matrix(used_vector, nrow = 2, ncol = 2)
}
# Constantes -------------------------------------------------------------------
# Dictionnaire de couleurs
color_dict = c(r = "#FF0000", b = "#00FFFF", y = "#FFFF00", g = "#00FF00",
w = "#FFFFFF")
# Alphabet de base
lA = creer_lettre(c("r", "r", "b", "b"))
lB = creer_lettre(c("y", "y", "r", "r"))
lC = creer_lettre(c("r", "w", "r", "r"))
lD = creer_lettre(c("r", "r", "g", "r"))
lE = creer_lettre(c("r", "b", "b", "b"))
lF = creer_lettre(c("y", "r", "y", "y"))
lG = creer_lettre(c("y", "r", "y", "r"))
lH = creer_lettre(c("r", "w", "g", "r"))
lI = creer_lettre(c("b", "b", "b", "r"))
lJ = creer_lettre(c("w", "r", "r", "r"))
lK = creer_lettre(c("y", "y", "y", "y"))
lL = creer_lettre(c("g", "r", "w", "r"))
all_colors = list(lA, lB, lC, lD, lE, lF, lG, lH, lI, lJ, lK, lL)
all_colors = setNames(all_colors, LETTERS[1:12])
# Substitution -----------------------------------------------------------------
# Puzzle text line by line
first_line  = c("GFLFGFLFLFGFFLFFI")
second_line = c("AADADKDEDABKAAADB")
third_line  = c("DAAKDFAAAABKADAAC")
fourth_line = c("ILIGIGIFLIIKFGFLF")
fifth_line  = c("KABFBBBCCBBHADKDK")
sixth_line  = c("KABLBHBKBBBKADFDF")
# in a single matrix
puzzle_text = matrix(c(first_line, second_line, third_line, fourth_line,
fifth_line, sixth_line), nrow = 6)
# In a single matrix split by character
single_matrix = apply(puzzle_text, 1, strsplit, split = "")
single_matrix = matrix(unlist(single_matrix), byrow = TRUE, nrow = 6)
# Convert each letter to a matrix of colors
colored_output = lapply(single_matrix, function(x) {
all_colors[[x]]
})
# Assemble colors to be a single matrix
all_columns = lapply(1:17, function(x) {
min_range = 1 + (x-1)*6
max_range = x*6
do.call(rbind, colored_output[min_range:max_range])
})
total_color = do.call(cbind, all_columns)
image(matrix(1:408, nrow = 34, ncol = 12), col = t(total_color))
image(t(matrix(1:408, nrow = 34, ncol = 12)), col = total_color)
image(t(matrix(1:408, nrow = 34, ncol = 12)), col = t(total_color))
image(t(t(t(matrix(1:408, nrow = 34, ncol = 12)))), col = t(t(total_color)))
image(t(matrix(1:408, nrow = 34, ncol = 12)), col = t(total_color))
# Code pour l'énigme Zwolle #4
# Fonctions --------------------------------------------------------------------
creer_lettre = function(given_vector, dictionary = color_dict) {
# Vérification que code correspond à dictionnaire
if (!all(unique(given_vector) %in% names(dictionary))) {
stop("Mismatch between dictionary and vector!")
}
used_vector = dictionary[given_vector]
matrix(used_vector, nrow = 2, ncol = 2)
}
# Constantes -------------------------------------------------------------------
# Dictionnaire de couleurs
color_dict = c(r = "#FF0000", b = "#00FFFF", y = "#FFFF00", g = "#00FF00",
w = "#FFFFFF")
# Alphabet de base
lA = creer_lettre(c("r", "r", "b", "b"))
lB = creer_lettre(c("y", "y", "r", "r"))
lC = creer_lettre(c("r", "w", "r", "r"))
lD = creer_lettre(c("r", "r", "g", "r"))
lE = creer_lettre(c("r", "b", "b", "b"))
lF = creer_lettre(c("y", "r", "y", "y"))
lG = creer_lettre(c("y", "r", "y", "r"))
lH = creer_lettre(c("r", "w", "g", "r"))
lI = creer_lettre(c("b", "b", "b", "r"))
lJ = creer_lettre(c("w", "r", "r", "r"))
lK = creer_lettre(c("y", "y", "y", "y"))
lL = creer_lettre(c("g", "r", "w", "r"))
lA
# Code pour l'énigme Zwolle #4
# Fonctions --------------------------------------------------------------------
creer_lettre = function(given_vector, dictionary = color_dict) {
# Vérification que code correspond à dictionnaire
if (!all(unique(given_vector) %in% names(dictionary))) {
stop("Mismatch between dictionary and vector!")
}
used_vector = dictionary[given_vector]
matrix(used_vector, nrow = 2, ncol = 2)
}
# Constantes -------------------------------------------------------------------
# Dictionnaire de couleurs
color_dict = c(r = "#FF0000", b = "#00FFFF", y = "#FFFF00", g = "#00FF00",
w = "#FFFFFF")
# Alphabet de base
lA = creer_lettre(c("r", "r", "b", "b"))
lB = creer_lettre(c("y", "y", "r", "r"))
lC = creer_lettre(c("r", "w", "r", "r"))
lD = creer_lettre(c("r", "r", "g", "r"))
lE = creer_lettre(c("r", "b", "b", "b"))
lF = creer_lettre(c("y", "r", "y", "y"))
lG = creer_lettre(c("y", "r", "y", "r"))
lH = creer_lettre(c("r", "w", "g", "r"))
lI = creer_lettre(c("b", "b", "b", "r"))
lJ = creer_lettre(c("w", "r", "r", "r"))
lK = creer_lettre(c("y", "y", "y", "y"))
lL = creer_lettre(c("g", "r", "w", "r"))
all_colors = list(lA, lB, lC, lD, lE, lF, lG, lH, lI, lJ, lK, lL)
all_colors = setNames(all_colors, LETTERS[1:12])
# Substitution -----------------------------------------------------------------
# Puzzle text line by line
first_line  = c("GFLFGFLFLFGFFLFFI")
second_line = c("AADADKDEDABKAAADB")
third_line  = c("DAAKDFAAAABKADAAC")
fourth_line = c("ILIGIGIFLIIKFGFLF")
fifth_line  = c("KABFBBBCCBBHADKDK")
sixth_line  = c("KABLBHBKBBBKADFDF")
# in a single matrix
puzzle_text = matrix(c(first_line, second_line, third_line, fourth_line,
fifth_line, sixth_line), nrow = 6)
# In a single matrix split by character
single_matrix = apply(puzzle_text, 1, strsplit, split = "")
single_matrix = matrix(unlist(single_matrix), byrow = TRUE, nrow = 6)
# Convert each letter to a matrix of colors
colored_output = lapply(single_matrix, function(x) {
all_colors[[x]]
})
# Assemble colors to be a single matrix
all_columns = lapply(1:17, function(x) {
min_range = 1 + (x-1)*6
max_range = x*6
do.call(rbind, colored_output[min_range:max_range])
})
total_color = do.call(cbind, all_columns)
# Tadaaa
image(t(matrix(1:408, nrow = 34, ncol = 12)), col = t(total_color))
c(20, 18, 16, 1, 5, 81, 20, 9, 16, 12, 15, 18, 1, 2, 15, 20, 5)
a = c(20, 18, 16, 1, 5, 81, 20, 9, 16, 12, 15, 18, 1, 2, 15, 20, 5)
letters[a]
a = c(20, 18, 16, 1, 5, 18, 20, 9, 16, 12, 15, 18, 1, 2, 15, 20, 5)
letters[a]
a = c(20, 18, 1, 16, 5, 18, 20, 9, 16, 12, 15, 18, 1, 2, 15, 20, 5)
a = c(20, 18, 1, 16, 5, 18, 20, 9, 16, 12, 15, 18, 1, 2, 15, 20, 5)
letters[a]
paste(letters[a], collapse = "")
update.packages(ask = FALSE)
h = read.table("Downloads/tde202011214595.txt", skip = 3)
?read.table
h = read.table("Downloads/tde202011214595.txt", skip = 2)
h = read.table("Downloads/tde202011214595.txt", skip = 2, sep = "\t")
head(h)
h = read.table("Downloads/tde202011214595.txt", skip = 3, sep = "\t")
head(h)
h = read.table("Downloads/tde202011214595.txt", skip = 3, sep = "\t", header = TRUE)
head(h)
library("dplyr")
h %>%
arrange(desc(AccSpecNum))
h %>%
arrange(desc(AccSpecNum)) %>%
View()
a = "001100000101000011001111
000100000101000001010010
000101010100000101001110
001001010010000101010011
010100001100000101001110
001111001101000100000101
001100000001010110001001
001100001100000101001111
010101010011000101010100
010010001111010101010110
000101001100000101010000
001111001001001110010100
100100000100000101000111
010010000101010011110011
001101001001001110010101
010100000101010011110110
010011000101000011001111
001110000100000101010011
001110001111010010000100
000101010100100111000100
000101000111010010000101
010011000001001101001001
001110010101010100000101
100011010011000101000011
001111001110000100000101
010011000101010011010100"
strsplit(a, "\d[6]")
strsplit(a, "\\d[6]")
strsplit(a, "\\n")
strsplit(strsplit(a, "\\n"), "\\d[6]")
strsplit(strsplit(a, "\\n")[[1]], "\\d[6]")
?strsplit
b = strsplit(a, "\\n")
b
d = unlist(b)
d
nchard()
nchar(d)
substring(d, seq(1, nchar(d), 6), seq(6, nchar(d), 6))
substring(d, seq(1, 24, 6), seq(6, 24, 6))
substring(d, seq(1, 24, 6), seq(6, 24, 6)) %>%
length()
length(substring(d, seq(1, 24, 6), seq(6, 24, 6)))
24*26
length(d)
d
26*24
substring(d, seq(1, 624, 6), seq(6, 624, 6))
d
substring(b, seq(1, 624, 6), seq(6, 624, 6))
d = paste(unlist(b), sep = "", collapse = "")
substring(d, seq(1, 624, 6), seq(6, 624, 6))
intToBits(1)
intToBits(2)
?intToBits
R.utils::intToBin(1)
R.utils::intToBin(2)
R.utils::intToBin(3)
R.utils::intToBin(26)
as.integer(R.utils::intToBin(26))
letter_codes = as.integer(R.utils::intToBin(1:26))
letter_codes
sprintf("%06d", letter_codes)
letter_codes = sprint("%06d", as.integer(R.utils::intToBin(1:26)))
letter_codes = sprintf("%06d", as.integer(R.utils::intToBin(1:26)))
letter_codes
letter_dict = letters
names(letter_dict) = letter_codes
letter_codes
letter_dict[cut_pieces]
cut_pieces = substring(d, seq(1, 624, 6), seq(6, 624, 6))
letter_dict[cut_pieces]
letter_dict[cut_pieces] %>%
paste(collapse = "")
paste(letter_dict[cut_pieces], collapse = "")
which(is.na(letter_dict[cut_pieces]))
cut_pieces[49]
?R.utils::intToBin
cut_pieces[56]
cut_pieces[64]
cut_pieces[79]
cut_pieces[which(is.na(letter_dict[cut_pieces]))]
strtoi(cut_pieces[which(is.na(letter_dict[cut_pieces]))])
strtoi(cut_pieces[which(is.na(letter_dict[cut_pieces]))], base = 2L)
?strtoi
d
cut_pices
cut_pieces
strtoi(cut_pieces, base = 2L)
letters[strtoi(cut_pieces, base = 2L)]
# 36° 51' 54" Nord  39° 35' Est
strtoi(cut_pieces[which(is.na(Code))], base = 2L)
cut_pieces = substring(d, seq(1, 624, 6), seq(6, 624, 6))
Code = strtoi(cut_pieces, base = 2L)
# 36° 51' 54" Nord  39° 35' Est
strtoi(cut_pieces[which(is.na(Code))], base = 2L)
Code
# "lecodearetenirestlenomdelavilleousetrouvelepointNAdegresNAminutesNAsecondesnordetNAdegresaminuteNAsecondesest"
letters[Code]
# "lecodearetenirestlenomdelavilleousetrouvelepointNAdegresNAminutesNAsecondesnordetNAdegresaminuteNAsecondesest"
paste(letters[Code], collapse = "")
which(is.na(Code))
str(Code)
# 36° 51' 54" Nord  39° 35' Est
strtoi(cut_pieces[which(Code > 26)], base = 2L)
decalage = c(1, 9, 10, -6, 1, -11, -6, +4, -10, -9, +1, +5, +12, -10, -9, -7,
-3, +4 , -6, -1, +3, -10, +2, -9, -8, +2)
decalage
# Énigme 19
texte = "ENCIATXDUSLFMRVJHQKOWPZGBY"
strsplit(text, split = "")
strsplit(texte, split = "")
strsplit(texte, split = "")[[1]]
whichi(letters == strsplit(texte, split = "")[[1]])
lapply(txt_split, function(x) which(letters == x))
txt_split = strpsplit(text, split = "")[[1]]
lapply(txt_split, function(x) which(letters == x))
txt_split = strsplit(text, split = "")[[1]]
txt_split = strsplit(text, split = "")[[1]]
txt_split = strsplit(texte, split = "")[[1]]
lapply(txt_split, function(x) which(letters == x))
letters == "E"
?which
lapply(txt_split, function(x) which(LETTERS == x))
unlist(lapply(txt_split, function(x) which(LETTERS == x)))
pos_init = unlist(lapply(txt_split, function(x) which(LETTERS == x)))
LETTERS[pos_init]
LETTERS[pos_init + decalage]
pos_init + decalage
hu = pos_init + decalage
hu[1:15]
hu[1:20]
LETTERS[hu[1:20]]
?%%
?`%%`
decalage %% 26
texte[decalage %% 26]
txt_split[decalage %% 26]
decalage_complet = c(+1,+9,+10,-6,+1,-11,-6,+4,-10,-9,+1,+5,+12,-10,-9,-7,-3,+2,
+6,+8,+1,+10,-10,-8,-2,+1,+2,+4,+7,-1,+7,-2,-3,+4,-6,-1,+3,
-10,+2,-9,-8,+2)
letters[decalage_complet]
letters[decalage_complet %% 26]
which(premier == letters)
# Lettres correspondantes
premier = letters[decalage_complet %% 26]
which(premier == letters)
match(premier, letters)
txt_split[corres]
corres = match(premier, letters)
txt_split[corres]
letters[decalage_complet %% 26]
paste0(letters[decalage_complet %% 26], collapse = "")
premier
corres = match(premier, letters)
txt_split[corres]
paste0(txt_split[corres], collapse = "")
txt_split[c(8, 1, 16)]
txt_split[c(8, 2, 8, 7)]
letters[c(8, 2, 8, 7)]
txt_split[c(8, 2, 9, 7)]
match(txt_split[c(8, 2, 9, 7)], letters)
match(letters, txt_split[c(8, 2, 9, 7)])
match(txt_split[c(8, 2, 9, 7)], letters)
LETTERS[c(8, 2, 9, 7)]
LETTERS[c(8, 1, 9, 7)]
txt_split[c(8, 1, 9, 7)]
txt_split[c(13, 5, 10)]
txt_split[c(13, 5, 10, 11, 1, 10)]
decalage_complet
cumdiff(decalage_complet)
diff(decalage_complet)
16+24
-16+24
txt_split[c(12, 5, 10, 11, 1, 10)]
txt_split[c(13, 4, 10, 11, 1, 10)]
txt_split[c(13, 4, 11, 11, 1, 10)]
length(c(8, 2, 9, 7, 13, 4, 11, 11, 1, 10))
txt_split[c(4)]
txt_split[c(4, 7, 3)]
txt_split[c(4, 7, 3, 1, 2, 4)]
txt_split[c(8, 2, 9, 7, 13, 4, 11, 11, 1, 10, 4, 7, 3, 1, 2, 4, 5, 4, 2, 18, 9, 5, 2, 6, 3, 1, 2, 3, 17, 8, 16)]
txt_split[c(8, 1, 9, 7, 13, 4, 11, 11, 1, 10, 4, 7, 3, 1, 2, 4, 5, 4, 2, 18, 9, 5, 2, 6, 3, 1, 2, 3, 17, 8, 16)]
txt_split[c(8, 1, 9, 7, 13, 4, 11, 11, 1, 10, 4, 7, 3, 1, 2, 4, 5, 4, 2, 18, 9, 5, 2, 6, 3, 1, 2, 3, 17, 8, 16)]
a = c(8, 1, 9, 7, 13, 4, 11, 11, 1, 10, 4, 7, 3, 1, 2, 4, 5, 4, 2, 18, 9, 5, 2, 6, 3, 1, 2, 3, 17, 8, 16)
a[24]
text_split[6]
txt_split[6]
a = c(8, 1, 9, 7, 13, 4, 11, 11, 1, 10, 4, 7, 3, 1, 2, 4, 5, 4, 2, 18, 9, 5, 2, 6, 3, 1, 2, 3, 18, 9, 17)
txt_split[a]
txt_split[c(8, 1, 9, 7, 13, 4, 11, 11, 1, 10, 4, 7, 3, 1, 2, 4, 5, 4, 2, 18, 9, 5, 2, 6, 3, 1, 2, 3, 17, 9, 16)]
paste0(txt_split[c(8, 1, 9, 7, 13, 4, 11, 11, 1, 10, 4, 7, 3, 1, 2, 4, 5, 4, 2, 18, 9, 5, 2, 6, 3, 1, 2, 3, 17, 9, 16)], collapse = "")
# Énigme 19
texte = "ENCIATXDUSLFMRVJHQKOWPZGBY"
txt_split = strsplit(texte, split = "")[[1]]
pos_init = unlist(lapply(txt_split, function(x) which(LETTERS == x)))
LETTERS[pos_init]
decalage = c(1, 9, 10, -6, 1, -11, -6, +4, -10, -9, +1, +5, +12, -10, -9, -7,
-3, +4 , -6, -1, +3, -10, +2, -9, -8, +2)
txt_split[decalage %% 26]
# décalage total
decalage_complet = c(+1,+9,+10,-6,+1,-11,-6,+4,-10,-9,+1,+5,+12,-10,-9,-7,-3,+2,
+6,+8,+1,+10,-10,-8,-2,+1,+2,+4,+7,-1,+7,-2,-3,+4,-6,-1,+3,
-10,+2,-9,-8,+2)
# Lettres correspondantes
premier = letters[decalage_complet %% 26]
corres = match(premier, letters)
txt_split[corres]
letters[c(8, 2, 8, 7)]
txt_split[c(8, 1, 9, 7, 13, 4, 11, 11, 1, 10, 4, 7, 3, 1, 2, 4, 5, 4, 2, 18, 9, 5, 2, 6, 3, 1, 2, 3, 17, 9, 16, 1, 7, 14, 5, 4, 12, 12, 14, 1, 10)]
h = txt_split[c(8, 1, 9, 7, 13, 4, 11, 11, 1, 10, 4, 7, 3, 1, 2, 4, 5, 4, 2, 18, 9, 5, 2, 6, 3, 1, 2, 3, 17, 9, 16, 1, 7, 14, 5, 4, 12, 12, 14, 1, 10)]
h
paste(h, collapse = "")
setwd("Projects/personal_website/blogdown_source/")
blogdown::build_site()
?blogdown::install_theme
blogdown::install_theme("gcushen/hugo-academic", force = TRUE)
devtools::install_github("r-lib/hugodown")
blogdown::build_site()
blogdown::hugo_version()
blogdown::build_site()
